#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBCourse
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PrtsDB")]
	public partial class PrtsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertaddedby(addedby instance);
    partial void Updateaddedby(addedby instance);
    partial void Deleteaddedby(addedby instance);
    partial void Insertcreators(creators instance);
    partial void Updatecreators(creators instance);
    partial void Deletecreators(creators instance);
    partial void Insertinstruments(instruments instance);
    partial void Updateinstruments(instruments instance);
    partial void Deleteinstruments(instruments instance);
    partial void Insertpartiture(partiture instance);
    partial void Updatepartiture(partiture instance);
    partial void Deletepartiture(partiture instance);
    partial void Insertsoftware(software instance);
    partial void Updatesoftware(software instance);
    partial void Deletesoftware(software instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    #endregion
		
		public PrtsDataContext() : 
				base(global::DBCourse.Properties.Settings.Default.PrtsDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrtsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrtsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrtsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrtsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<addedby> addedby
		{
			get
			{
				return this.GetTable<addedby>();
			}
		}
		
		public System.Data.Linq.Table<creators> creators
		{
			get
			{
				return this.GetTable<creators>();
			}
		}
		
		public System.Data.Linq.Table<instruments> instruments
		{
			get
			{
				return this.GetTable<instruments>();
			}
		}
		
		public System.Data.Linq.Table<partiture> partiture
		{
			get
			{
				return this.GetTable<partiture>();
			}
		}
		
		public System.Data.Linq.Table<software> software
		{
			get
			{
				return this.GetTable<software>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.addedby")]
	public partial class addedby : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _fk_user_id;
		
		private int _fk_partiture_id;
		
		private System.Nullable<System.DateTime> _added_on;
		
		private EntityRef<partiture> _partiture;
		
		private EntityRef<users> _users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onfk_user_idChanging(int value);
    partial void Onfk_user_idChanged();
    partial void Onfk_partiture_idChanging(int value);
    partial void Onfk_partiture_idChanged();
    partial void Onadded_onChanging(System.Nullable<System.DateTime> value);
    partial void Onadded_onChanged();
    #endregion
		
		public addedby()
		{
			this._partiture = default(EntityRef<partiture>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_user_id", DbType="Int NOT NULL")]
		public int fk_user_id
		{
			get
			{
				return this._fk_user_id;
			}
			set
			{
				if ((this._fk_user_id != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_user_idChanging(value);
					this.SendPropertyChanging();
					this._fk_user_id = value;
					this.SendPropertyChanged("fk_user_id");
					this.Onfk_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_partiture_id", DbType="Int NOT NULL")]
		public int fk_partiture_id
		{
			get
			{
				return this._fk_partiture_id;
			}
			set
			{
				if ((this._fk_partiture_id != value))
				{
					if (this._partiture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_partiture_idChanging(value);
					this.SendPropertyChanging();
					this._fk_partiture_id = value;
					this.SendPropertyChanged("fk_partiture_id");
					this.Onfk_partiture_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_added_on", DbType="Date")]
		public System.Nullable<System.DateTime> added_on
		{
			get
			{
				return this._added_on;
			}
			set
			{
				if ((this._added_on != value))
				{
					this.Onadded_onChanging(value);
					this.SendPropertyChanging();
					this._added_on = value;
					this.SendPropertyChanged("added_on");
					this.Onadded_onChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_addedby", Storage="_partiture", ThisKey="fk_partiture_id", OtherKey="pk_partiture_id", IsForeignKey=true)]
		public partiture partiture
		{
			get
			{
				return this._partiture.Entity;
			}
			set
			{
				partiture previousValue = this._partiture.Entity;
				if (((previousValue != value) 
							|| (this._partiture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._partiture.Entity = null;
						previousValue.addedby.Remove(this);
					}
					this._partiture.Entity = value;
					if ((value != null))
					{
						value.addedby.Add(this);
						this._fk_partiture_id = value.pk_partiture_id;
					}
					else
					{
						this._fk_partiture_id = default(int);
					}
					this.SendPropertyChanged("partiture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_addedby", Storage="_users", ThisKey="fk_user_id", OtherKey="pk_user_id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.addedby.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.addedby.Add(this);
						this._fk_user_id = value.pk_user_id;
					}
					else
					{
						this._fk_user_id = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.creators")]
	public partial class creators : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk_creators_id;
		
		private string _composer;
		
		private string _poet;
		
		private int _authors_of;
		
		private EntityRef<partiture> _partiture;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpk_creators_idChanging(int value);
    partial void Onpk_creators_idChanged();
    partial void OncomposerChanging(string value);
    partial void OncomposerChanged();
    partial void OnpoetChanging(string value);
    partial void OnpoetChanged();
    partial void Onauthors_ofChanging(int value);
    partial void Onauthors_ofChanged();
    #endregion
		
		public creators()
		{
			this._partiture = default(EntityRef<partiture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk_creators_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pk_creators_id
		{
			get
			{
				return this._pk_creators_id;
			}
			set
			{
				if ((this._pk_creators_id != value))
				{
					this.Onpk_creators_idChanging(value);
					this.SendPropertyChanging();
					this._pk_creators_id = value;
					this.SendPropertyChanged("pk_creators_id");
					this.Onpk_creators_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_composer", DbType="NChar(100)")]
		public string composer
		{
			get
			{
				return this._composer;
			}
			set
			{
				if ((this._composer != value))
				{
					this.OncomposerChanging(value);
					this.SendPropertyChanging();
					this._composer = value;
					this.SendPropertyChanged("composer");
					this.OncomposerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_poet", DbType="NChar(100)")]
		public string poet
		{
			get
			{
				return this._poet;
			}
			set
			{
				if ((this._poet != value))
				{
					this.OnpoetChanging(value);
					this.SendPropertyChanging();
					this._poet = value;
					this.SendPropertyChanged("poet");
					this.OnpoetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authors_of", DbType="Int NOT NULL")]
		public int authors_of
		{
			get
			{
				return this._authors_of;
			}
			set
			{
				if ((this._authors_of != value))
				{
					if (this._partiture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onauthors_ofChanging(value);
					this.SendPropertyChanging();
					this._authors_of = value;
					this.SendPropertyChanged("authors_of");
					this.Onauthors_ofChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_creators", Storage="_partiture", ThisKey="authors_of", OtherKey="pk_partiture_id", IsForeignKey=true)]
		public partiture partiture
		{
			get
			{
				return this._partiture.Entity;
			}
			set
			{
				partiture previousValue = this._partiture.Entity;
				if (((previousValue != value) 
							|| (this._partiture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._partiture.Entity = null;
						previousValue.creators.Remove(this);
					}
					this._partiture.Entity = value;
					if ((value != null))
					{
						value.creators.Add(this);
						this._authors_of = value.pk_partiture_id;
					}
					else
					{
						this._authors_of = default(int);
					}
					this.SendPropertyChanged("partiture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.instruments")]
	public partial class instruments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk_instrument_id;
		
		private string _instrument_name;
		
		private int _fk_part_in;
		
		private EntityRef<partiture> _partiture;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpk_instrument_idChanging(int value);
    partial void Onpk_instrument_idChanged();
    partial void Oninstrument_nameChanging(string value);
    partial void Oninstrument_nameChanged();
    partial void Onfk_part_inChanging(int value);
    partial void Onfk_part_inChanged();
    #endregion
		
		public instruments()
		{
			this._partiture = default(EntityRef<partiture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk_instrument_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pk_instrument_id
		{
			get
			{
				return this._pk_instrument_id;
			}
			set
			{
				if ((this._pk_instrument_id != value))
				{
					this.Onpk_instrument_idChanging(value);
					this.SendPropertyChanging();
					this._pk_instrument_id = value;
					this.SendPropertyChanged("pk_instrument_id");
					this.Onpk_instrument_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instrument_name", DbType="NChar(50)")]
		public string instrument_name
		{
			get
			{
				return this._instrument_name;
			}
			set
			{
				if ((this._instrument_name != value))
				{
					this.Oninstrument_nameChanging(value);
					this.SendPropertyChanging();
					this._instrument_name = value;
					this.SendPropertyChanged("instrument_name");
					this.Oninstrument_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_part_in", DbType="Int NOT NULL")]
		public int fk_part_in
		{
			get
			{
				return this._fk_part_in;
			}
			set
			{
				if ((this._fk_part_in != value))
				{
					if (this._partiture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_part_inChanging(value);
					this.SendPropertyChanging();
					this._fk_part_in = value;
					this.SendPropertyChanged("fk_part_in");
					this.Onfk_part_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_instruments", Storage="_partiture", ThisKey="fk_part_in", OtherKey="pk_partiture_id", IsForeignKey=true)]
		public partiture partiture
		{
			get
			{
				return this._partiture.Entity;
			}
			set
			{
				partiture previousValue = this._partiture.Entity;
				if (((previousValue != value) 
							|| (this._partiture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._partiture.Entity = null;
						previousValue.instruments.Remove(this);
					}
					this._partiture.Entity = value;
					if ((value != null))
					{
						value.instruments.Add(this);
						this._fk_part_in = value.pk_partiture_id;
					}
					else
					{
						this._fk_part_in = default(int);
					}
					this.SendPropertyChanged("partiture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.partiture")]
	public partial class partiture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk_partiture_id;
		
		private string _work_number;
		
		private string _title;
		
		private string _tempo;
		
		private string _meter;
		
		private string _note_length;
		
		private string _part_key;
		
		private string _filepath;
		
		private int _version_of;
		
		private EntitySet<addedby> _addedby;
		
		private EntitySet<creators> _creators;
		
		private EntitySet<instruments> _instruments;
		
		private EntitySet<partiture> _partiture2;
		
		private EntitySet<software> _software;
		
		private EntityRef<partiture> _partiture1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpk_partiture_idChanging(int value);
    partial void Onpk_partiture_idChanged();
    partial void Onwork_numberChanging(string value);
    partial void Onwork_numberChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntempoChanging(string value);
    partial void OntempoChanged();
    partial void OnmeterChanging(string value);
    partial void OnmeterChanged();
    partial void Onnote_lengthChanging(string value);
    partial void Onnote_lengthChanged();
    partial void Onpart_keyChanging(string value);
    partial void Onpart_keyChanged();
    partial void OnfilepathChanging(string value);
    partial void OnfilepathChanged();
    partial void Onversion_ofChanging(int value);
    partial void Onversion_ofChanged();
    #endregion
		
		public partiture()
		{
			this._addedby = new EntitySet<addedby>(new Action<addedby>(this.attach_addedby), new Action<addedby>(this.detach_addedby));
			this._creators = new EntitySet<creators>(new Action<creators>(this.attach_creators), new Action<creators>(this.detach_creators));
			this._instruments = new EntitySet<instruments>(new Action<instruments>(this.attach_instruments), new Action<instruments>(this.detach_instruments));
			this._partiture2 = new EntitySet<partiture>(new Action<partiture>(this.attach_partiture2), new Action<partiture>(this.detach_partiture2));
			this._software = new EntitySet<software>(new Action<software>(this.attach_software), new Action<software>(this.detach_software));
			this._partiture1 = default(EntityRef<partiture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk_partiture_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pk_partiture_id
		{
			get
			{
				return this._pk_partiture_id;
			}
			set
			{
				if ((this._pk_partiture_id != value))
				{
					this.Onpk_partiture_idChanging(value);
					this.SendPropertyChanging();
					this._pk_partiture_id = value;
					this.SendPropertyChanged("pk_partiture_id");
					this.Onpk_partiture_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_work_number", DbType="NChar(50)")]
		public string work_number
		{
			get
			{
				return this._work_number;
			}
			set
			{
				if ((this._work_number != value))
				{
					this.Onwork_numberChanging(value);
					this.SendPropertyChanging();
					this._work_number = value;
					this.SendPropertyChanged("work_number");
					this.Onwork_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NChar(100)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tempo", DbType="NChar(50)")]
		public string tempo
		{
			get
			{
				return this._tempo;
			}
			set
			{
				if ((this._tempo != value))
				{
					this.OntempoChanging(value);
					this.SendPropertyChanging();
					this._tempo = value;
					this.SendPropertyChanged("tempo");
					this.OntempoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_meter", DbType="NChar(50)")]
		public string meter
		{
			get
			{
				return this._meter;
			}
			set
			{
				if ((this._meter != value))
				{
					this.OnmeterChanging(value);
					this.SendPropertyChanging();
					this._meter = value;
					this.SendPropertyChanged("meter");
					this.OnmeterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note_length", DbType="NChar(50)")]
		public string note_length
		{
			get
			{
				return this._note_length;
			}
			set
			{
				if ((this._note_length != value))
				{
					this.Onnote_lengthChanging(value);
					this.SendPropertyChanging();
					this._note_length = value;
					this.SendPropertyChanged("note_length");
					this.Onnote_lengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_part_key", DbType="NChar(50)")]
		public string part_key
		{
			get
			{
				return this._part_key;
			}
			set
			{
				if ((this._part_key != value))
				{
					this.Onpart_keyChanging(value);
					this.SendPropertyChanging();
					this._part_key = value;
					this.SendPropertyChanged("part_key");
					this.Onpart_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filepath", DbType="NChar(100)")]
		public string filepath
		{
			get
			{
				return this._filepath;
			}
			set
			{
				if ((this._filepath != value))
				{
					this.OnfilepathChanging(value);
					this.SendPropertyChanging();
					this._filepath = value;
					this.SendPropertyChanged("filepath");
					this.OnfilepathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version_of", DbType="Int NOT NULL")]
		public int version_of
		{
			get
			{
				return this._version_of;
			}
			set
			{
				if ((this._version_of != value))
				{
					if (this._partiture1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onversion_ofChanging(value);
					this.SendPropertyChanging();
					this._version_of = value;
					this.SendPropertyChanged("version_of");
					this.Onversion_ofChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_addedby", Storage="_addedby", ThisKey="pk_partiture_id", OtherKey="fk_partiture_id")]
		public EntitySet<addedby> addedby
		{
			get
			{
				return this._addedby;
			}
			set
			{
				this._addedby.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_creators", Storage="_creators", ThisKey="pk_partiture_id", OtherKey="authors_of")]
		public EntitySet<creators> creators
		{
			get
			{
				return this._creators;
			}
			set
			{
				this._creators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_instruments", Storage="_instruments", ThisKey="pk_partiture_id", OtherKey="fk_part_in")]
		public EntitySet<instruments> instruments
		{
			get
			{
				return this._instruments;
			}
			set
			{
				this._instruments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_partiture", Storage="_partiture2", ThisKey="pk_partiture_id", OtherKey="version_of")]
		public EntitySet<partiture> partiture2
		{
			get
			{
				return this._partiture2;
			}
			set
			{
				this._partiture2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_software", Storage="_software", ThisKey="pk_partiture_id", OtherKey="fk_used_for_encoding")]
		public EntitySet<software> software
		{
			get
			{
				return this._software;
			}
			set
			{
				this._software.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_partiture", Storage="_partiture1", ThisKey="version_of", OtherKey="pk_partiture_id", IsForeignKey=true)]
		public partiture partiture1
		{
			get
			{
				return this._partiture1.Entity;
			}
			set
			{
				partiture previousValue = this._partiture1.Entity;
				if (((previousValue != value) 
							|| (this._partiture1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._partiture1.Entity = null;
						previousValue.partiture2.Remove(this);
					}
					this._partiture1.Entity = value;
					if ((value != null))
					{
						value.partiture2.Add(this);
						this._version_of = value.pk_partiture_id;
					}
					else
					{
						this._version_of = default(int);
					}
					this.SendPropertyChanged("partiture1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_addedby(addedby entity)
		{
			this.SendPropertyChanging();
			entity.partiture = this;
		}
		
		private void detach_addedby(addedby entity)
		{
			this.SendPropertyChanging();
			entity.partiture = null;
		}
		
		private void attach_creators(creators entity)
		{
			this.SendPropertyChanging();
			entity.partiture = this;
		}
		
		private void detach_creators(creators entity)
		{
			this.SendPropertyChanging();
			entity.partiture = null;
		}
		
		private void attach_instruments(instruments entity)
		{
			this.SendPropertyChanging();
			entity.partiture = this;
		}
		
		private void detach_instruments(instruments entity)
		{
			this.SendPropertyChanging();
			entity.partiture = null;
		}
		
		private void attach_partiture2(partiture entity)
		{
			this.SendPropertyChanging();
			entity.partiture1 = this;
		}
		
		private void detach_partiture2(partiture entity)
		{
			this.SendPropertyChanging();
			entity.partiture1 = null;
		}
		
		private void attach_software(software entity)
		{
			this.SendPropertyChanging();
			entity.partiture = this;
		}
		
		private void detach_software(software entity)
		{
			this.SendPropertyChanging();
			entity.partiture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.software")]
	public partial class software : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk_software_id;
		
		private string _software_name;
		
		private System.Nullable<System.DateTime> _encoding_date;
		
		private System.Nullable<int> _fk_used_for_encoding;
		
		private EntityRef<partiture> _partiture;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpk_software_idChanging(int value);
    partial void Onpk_software_idChanged();
    partial void Onsoftware_nameChanging(string value);
    partial void Onsoftware_nameChanged();
    partial void Onencoding_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onencoding_dateChanged();
    partial void Onfk_used_for_encodingChanging(System.Nullable<int> value);
    partial void Onfk_used_for_encodingChanged();
    #endregion
		
		public software()
		{
			this._partiture = default(EntityRef<partiture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk_software_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pk_software_id
		{
			get
			{
				return this._pk_software_id;
			}
			set
			{
				if ((this._pk_software_id != value))
				{
					this.Onpk_software_idChanging(value);
					this.SendPropertyChanging();
					this._pk_software_id = value;
					this.SendPropertyChanged("pk_software_id");
					this.Onpk_software_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_software_name", DbType="NChar(50)")]
		public string software_name
		{
			get
			{
				return this._software_name;
			}
			set
			{
				if ((this._software_name != value))
				{
					this.Onsoftware_nameChanging(value);
					this.SendPropertyChanging();
					this._software_name = value;
					this.SendPropertyChanged("software_name");
					this.Onsoftware_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_encoding_date", DbType="Date")]
		public System.Nullable<System.DateTime> encoding_date
		{
			get
			{
				return this._encoding_date;
			}
			set
			{
				if ((this._encoding_date != value))
				{
					this.Onencoding_dateChanging(value);
					this.SendPropertyChanging();
					this._encoding_date = value;
					this.SendPropertyChanged("encoding_date");
					this.Onencoding_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fk_used_for_encoding", DbType="Int")]
		public System.Nullable<int> fk_used_for_encoding
		{
			get
			{
				return this._fk_used_for_encoding;
			}
			set
			{
				if ((this._fk_used_for_encoding != value))
				{
					if (this._partiture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfk_used_for_encodingChanging(value);
					this.SendPropertyChanging();
					this._fk_used_for_encoding = value;
					this.SendPropertyChanged("fk_used_for_encoding");
					this.Onfk_used_for_encodingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="partiture_software", Storage="_partiture", ThisKey="fk_used_for_encoding", OtherKey="pk_partiture_id", IsForeignKey=true)]
		public partiture partiture
		{
			get
			{
				return this._partiture.Entity;
			}
			set
			{
				partiture previousValue = this._partiture.Entity;
				if (((previousValue != value) 
							|| (this._partiture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._partiture.Entity = null;
						previousValue.software.Remove(this);
					}
					this._partiture.Entity = value;
					if ((value != null))
					{
						value.software.Add(this);
						this._fk_used_for_encoding = value.pk_partiture_id;
					}
					else
					{
						this._fk_used_for_encoding = default(Nullable<int>);
					}
					this.SendPropertyChanged("partiture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pk_user_id;
		
		private string _full_name;
		
		private string _user_login;
		
		private string _user_password;
		
		private System.Nullable<System.DateTime> _registered_date;
		
		private EntitySet<addedby> _addedby;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpk_user_idChanging(int value);
    partial void Onpk_user_idChanged();
    partial void Onfull_nameChanging(string value);
    partial void Onfull_nameChanged();
    partial void Onuser_loginChanging(string value);
    partial void Onuser_loginChanged();
    partial void Onuser_passwordChanging(string value);
    partial void Onuser_passwordChanged();
    partial void Onregistered_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onregistered_dateChanged();
    #endregion
		
		public users()
		{
			this._addedby = new EntitySet<addedby>(new Action<addedby>(this.attach_addedby), new Action<addedby>(this.detach_addedby));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pk_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pk_user_id
		{
			get
			{
				return this._pk_user_id;
			}
			set
			{
				if ((this._pk_user_id != value))
				{
					this.Onpk_user_idChanging(value);
					this.SendPropertyChanging();
					this._pk_user_id = value;
					this.SendPropertyChanged("pk_user_id");
					this.Onpk_user_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_full_name", DbType="NChar(100)")]
		public string full_name
		{
			get
			{
				return this._full_name;
			}
			set
			{
				if ((this._full_name != value))
				{
					this.Onfull_nameChanging(value);
					this.SendPropertyChanging();
					this._full_name = value;
					this.SendPropertyChanged("full_name");
					this.Onfull_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_login", DbType="NChar(50)")]
		public string user_login
		{
			get
			{
				return this._user_login;
			}
			set
			{
				if ((this._user_login != value))
				{
					this.Onuser_loginChanging(value);
					this.SendPropertyChanging();
					this._user_login = value;
					this.SendPropertyChanged("user_login");
					this.Onuser_loginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_password", DbType="NChar(50)")]
		public string user_password
		{
			get
			{
				return this._user_password;
			}
			set
			{
				if ((this._user_password != value))
				{
					this.Onuser_passwordChanging(value);
					this.SendPropertyChanging();
					this._user_password = value;
					this.SendPropertyChanged("user_password");
					this.Onuser_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registered_date", DbType="Date")]
		public System.Nullable<System.DateTime> registered_date
		{
			get
			{
				return this._registered_date;
			}
			set
			{
				if ((this._registered_date != value))
				{
					this.Onregistered_dateChanging(value);
					this.SendPropertyChanging();
					this._registered_date = value;
					this.SendPropertyChanged("registered_date");
					this.Onregistered_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_addedby", Storage="_addedby", ThisKey="pk_user_id", OtherKey="fk_user_id")]
		public EntitySet<addedby> addedby
		{
			get
			{
				return this._addedby;
			}
			set
			{
				this._addedby.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_addedby(addedby entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_addedby(addedby entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
}
#pragma warning restore 1591
